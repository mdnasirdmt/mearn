// #First, create a root folder for your project. Let's call it full-stack-app.
// #Open your terminal, navigate to the full-stack-app folder, and create subfolders for the backend and frontend:

// mkdir full-stack-app
// cd full-stack-app
// mkdir backend frontend
// -----------------------------

// #Initialize the backend folder as a Node.js project and install Express:

// cd backend
// npm init -y
// npm install express
// ----------------------------


// #Create a basic Express server in the backend folder. Create a file named server.js and add some simple code:

// // backend/server.js
// const express = require('express');
// const app = express();


// app.get('/', (req, res) => {
//   res.send('Hello from the backend!');
// });

// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });
// ------------------------

// #In the frontend folder, initialize a React project using Vite:

// cd ../frontend
// npx create-react@latest
// ---------------------------

// #After setting up the frontend, you can create your React components and application in the frontend folder.

// #Finally, to run both the backend and frontend simultaneously, you can use a tool like concurrently. Install it in #the root folder:


// cd ..
// npm install concurrently

// ------------------------------------

// #In the root folder, create a package.json file to manage the project. Add the following scripts:

// {
//   "name": "full-stack-app",
//   "version": "1.0.0",
//   "description": "Full-stack app with Express and React (Vite)",
//   "scripts": {
//     "start:backend": "node backend/server.js",
//     "start:frontend": "cd frontend && npm start",
//     "start": "concurrently \"npm run start:backend\" \"npm run start:frontend\""
//   }
// }

// --------------------------------------


// #This package.json includes scripts to run both the backend and frontend with a single npm start command.
// #Start the project by running:
 npm start

// -----------------------------------

// #This will start both the Express backend server and the React development server concurrently. The backend server #will be accessible at http://localhost:3000, and the React development server at its default port.

// ------------


// 1. Handling Proxy Issues:

// #Proxying is a technique that allows you to make requests to an API or backend server from your frontend application #while avoiding the CORS restrictions. Here's how you can set up proxying in your React (Vite) project:

// #In your frontend project, open the vite.config.js file (if it doesn't exist, create it in your project's root #folder).

// #Add a proxy option to your vite.config.js file, specifying the URL of your backend server. For example:


// // frontend/vite.config.js
// export default {
//   // ... other Vite configurations ...
//   server: {
//     proxy: {
//       '/api': 'http://localhost:3000', // Replace with your backend server URL
//     },
//   },
// }

// -----------------------------------

// 2. Handling CORS Issues:

// #To handle CORS issues on your backend server (Node.js/Express), you need to configure your server to allow #backend folder, install the cors package:

npm install cors

// -------------------------------------------------------------------
// // backend/server.js
// const express = require('express');
// const cors = require('cors');
// const app = express();

// Enable CORS for all routes
// app.use(cors()); 

// app.get('/api/data', (req, res) => {
//   // Your API logic here
//   res.json({ message: 'Data from the backend' });
// });

// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });

// -----------------

// Create an .env file in your backend folder.

// In the .env file, define a variable for the port. For example, you can set it to port 3000:

// PORT=3000
// Modify your Express server code to use the dotenv package to load environment variables from the .env file. Install dotenv

// cd backend
// npm install dotenv
// Update your server.js file to use the environment variable for the port:

// // backend/server.js
// const express = require('express');
// const cors = require('cors');
// const app = express();

// Load environment variables from .env file
require('dotenv').config();  // common javaScript 
or
import dotenv from 'dotenv';  // for es moule

// Load environment variables from .env file
dotenv.config();

const port = process.env.PORT || 3000

app.use(cors());


// app.get('/api/data', (req, res) => {
//   res.json(employeesList);
// });

// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });
// Now, your Express server will use the PORT environment variable from the .env file, and if it's not set, it will use the default port 3000.


// -------------

# create a build file
npm run build

# in server.js file paste below code
it will run our app without running frontend app 

app.use(express.static('dist'))

# run app
npm start


